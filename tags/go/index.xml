<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on roessland's blog</title><link>https://www.roessland.com/tags/go/</link><description>Recent content in go on roessland's blog</description><generator>Hugo -- gohugo.io</generator><copyright>Andreas RÃ¸ssland</copyright><lastBuildDate>Sat, 03 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://www.roessland.com/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Functional Options in Go and Rust</title><link>https://www.roessland.com/blog/functional-options-in-go-and-rust/</link><pubDate>Sat, 03 Jun 2023 00:00:00 +0000</pubDate><guid>https://www.roessland.com/blog/functional-options-in-go-and-rust/</guid><description>The Functional Options Pattern is a safer alternative to struct literals, and is commonly used in Go. These are the challenges I encountered when trying it out in Rust.</description></item></channel></rss>